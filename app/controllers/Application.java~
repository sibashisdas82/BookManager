package controllers;

import java.util.List;

import play.*;
import play.mvc.*;
import play.libs.Json;
import play.Logger;

import views.html.*;

import org.bson.types.ObjectId;

import org.codehaus.jackson.JsonNode;
import org.codehaus.jackson.node.ObjectNode;

import models.Login;
import models.Book;

public class Application extends Controller {
  
	public static Result index() {
    	return ok(index.render("Your new application is ready."));
  	}
  
  	/*
	@BodyParser.Of(BodyParser.Json.class)
	public static Result test() {
		
		//JsonNode json = request().body().asJson();
  		ObjectNode result = Json.newObject();
  		//String name = json.findPath("name").getTextValue();
  		String name = "Sibashis";
  		if(name == null) {
    		result.put("status", "KO");
    		result.put("message", "Missing parameter [name]");
			return badRequest(result);
  		} else {
    		result.put("status", "OK");
			result.put("message", "Hello " + name);
			return ok(result);
  		}
	}*/
	
	public static Result books() {
		Logger.debug("Raw data : " + Book.all().toString());
		//JsonNode json = Json.toJson(Book.all());
		//Logger.debug("JSON :: " + json.toString());
		//return ok(json);
		return ok(Book.all().toString());
	}
	
	public static Result userBooks(String userId) {
		Logger.debug("Raw data : " + Book.filterList(userId).toString());
		//JsonNode json = Json.toJson(Book.all());
		//Logger.debug("JSON :: " + json.toString());
		//return ok(json);
		return ok(Book.filterList(userId).toString());
	}
	
	public static Result filterBooks(String title) {
		Logger.debug("Raw search data : " + Book.search(title).toString());
		//JsonNode json = Json.toJson(Book.all());
		//Logger.debug("JSON :: " + json.toString());
		//return ok(json);
		return ok(Book.search(title).toString());
	}

	public static Result newBook() {
		JsonNode json = request().body().asJson();
		ObjectNode result = Json.newObject();
		String id = json.findPath("id").getTextValue();
		String userId = json.findPath("userId").getTextValue();
  		String author = json.findPath("author").getTextValue();
  		String title = json.findPath("title").getTextValue();
  		String content = json.findPath("content").getTextValue();
		
		if(userId == null || author == null || title == null || content == null) {
			result.put("status", "KO");
    		result.put("message", "Missing parameter(s)");
			return badRequest(result);
		} else {
			Book book = Json.fromJson(json, Book.class);
			if(id != null) {
				result.put("status", "OK");
				result.put("message", "Book updated successfully");
			}
			else {
				ObjectId newId = new ObjectId();
				book.setId(newId);
				Logger.debug("New JSON :: " + book.toString());
				
				result.put("status", "OK");
				result.put("message", "New book '" + title + "' saved successfully");
				result.put("bookId", newId);
			}
			Book.create(book);
			return ok(result);			
		}
	}
	
	public static Result deleteBook(String id) {
		ObjectNode result = Json.newObject();
		Logger.debug("Book ID :: " + id);
		if(id == null) {
			result.put("status", "KO");
    		result.put("message", "Missing parameter(s)");
			return badRequest(result);
		} else {
			Book.delete(id);
			result.put("status", "OK");
			result.put("message", "Book deleted successfully");
			return ok(result);
		}
	}
	
	public static Result newLogin() {
		JsonNode json = request().body().asJson();
		ObjectNode result = Json.newObject();
  		String userId = json.findPath("userId").getTextValue();
  		String password = json.findPath("password").getTextValue();
		
		if(userId == null || password == null) {
			result.put("status", "KO");
    		result.put("message", "Missing parameter(s)");
			return badRequest(result);
		} else {
			Login login = Json.fromJson(json, Login.class);
			Login.create(login);			
			
			result.put("status", "OK");
			result.put("message", "New login created successfully");
			return ok(result);
		}
	}
	
	public static Result userLogin() {
		JsonNode json = request().body().asJson();
		ObjectNode result = Json.newObject();
		String uid = json.findPath("userId").getTextValue();
  		String pass = json.findPath("password").getTextValue();
		
		if(uid == null || pass == null) {
			result.put("status", "KO");
    		result.put("message", "Missing parameter(s)");
			return badRequest(result);
		} else {
			Login login = new Login();
			login.userId = uid;
			login.password = pass;
			boolean isAuth = Login.isAuth(login);
			
			if(isAuth) {
				result.put("status", "OK");
				result.put("message", "Authetic user");
				result.put("userId", uid);
			} else {
				result.put("status", "OK");
				result.put("message", "Credential doesn't match");
			}			
			return ok(result);
		}	
	}
}
